<?php

namespace App\Controller;

use App\Entity\User;
use App\Entity\Trick;
use App\Entity\Comment;
use App\Form\TrickType;
use App\Entity\Category;
use App\Form\CommentType;
use App\Repository\UserRepository;
use App\Repository\TrickRepository;
use App\Repository\CommentRepository;
use App\Repository\CategoryRepository;
use Doctrine\ORM\EntityManagerInterface;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use Knp\Component\Pager\PaginatorInterface; 
use Symfony\Component\HttpFoundation\Request;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Security\Core\User\UserInterface;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;






class TricksController extends AbstractController
{
    /**
     * @Route("/tricks", name="tricks")
     */
    public function index()
    {
        return $this->render('tricks/index.html.twig', [
            'controller_name' => 'TricksController',
            
        ]);
    }
    
    /**
     * @Route("/", name="home")
     */
    public function home(TrickRepository $repo)
    {

        $tricks = $repo->findAll();


        return $this->render('tricks/home.html.twig', [
            'tricks' => $tricks
            
        ]);
    }

    /**
     * @Route("/tricks/new" , name="trick_new")
     * @Route("/tricks/{id}/edit" , name="trick_edit")
     * @IsGranted("ROLE_USER")
     */
    public function form(Trick $trick=null,Request $request, ObjectManager $manager)
    {
         
        if(!$trick)
        {
            $trick = new Trick();
        
        }
      
        $form = $this->createForm(TrickType::class, $trick);

        $form = $form->handleRequest($request);

        if($form->isSubmitted() &&  $form->isValid())
        {
            if(!$trick->getId()){
                $trick->setCreatedAt(new \DateTime);
                
                $file = $form->get('image')->getData();

         $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

          // moves the file to the directory where brochures are stored
          $file->move(
            $this->getParameter('image'),
            $fileName 
        );


         $trick->setImage($fileName);
            }

            else{

                
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
   
             // moves the file to the directory where brochures are stored
             $file->move(
               $this->getParameter('image'),
               $fileName 
           );
   
   
            $trick->setImage($fileName);
            
            }


             $manager->persist($trick);
             $manager->flush();
             $this->addFlash(
                'notice',
                'Your Trick is added to the database'
            );

             return $this->redirectToRoute('trick_show', ['id' => $trick->getId()]);

        }

        

        return $this->render('tricks/create.html.twig', [
            'formTrick' => $form->createView(),
            'edit_mode' => $trick->getId() !== null
        ]);
    }

    /**
     * @return string
     */
    public function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    /**
     * @Route("/tricks/{id}/delete" , name="trick_delete")
     * @IsGranted("ROLE_USER")
     */
    public function deleteTrick(Trick $trick,Request $request, ObjectManager $manager, TrickRepository $repo)
    {
        $manager->remove($trick);
        $manager->flush();
        return $this->redirectToRoute('home');
        
    }

    /**
     * @route("/tricks/{id}", name="trick_show")
     */
    public function show(Trick $trick,Request $request, ObjectManager $manager,UserInterface $user = null,CommentRepository $repo,CategoryRepository $cat_repo,PaginatorInterface $paginator)
    {
         $comment = new Comment();
         $form = $this->createForm(CommentType::class, $comment);
         $commententaires = $trick->getComments();
         $id_cat = $trick->getCategory();
         
         $associatetricks = $cat_repo->find($id_cat);

         $associatetricks = $associatetricks->getTricks();
         

         $comments = $paginator->paginate(
            $commententaires, // Requête contenant les données à paginer (ici nos articles)
            $request->query->getInt('page', 1), // Numéro de la page en cours, passé dans l'URL, 1 si aucune page
            6 // Nombre de résultats par page
        );
         
         $form = $form->handleRequest($request);
         if($form->isSubmitted() &&  $form->isValid())
         {
            $comment->setCreatedAt(new \DateTime);
            $comment->setUserId($user);
            $comment->setTrick($trick);
            $manager->persist($comment);
            $manager->flush();
            return $this->redirectToRoute('trick_show', ['id' => $trick->getId()]);

         }

        // this function will retrieve the identifier thanks to the param convert
        return $this->render('tricks/show.html.twig', [
            'trick' => $trick,
            'formComment' => $form->createView(),
            'comments' => $comments,
            'associatetricks' => $associatetricks
            
        ]);
    }


}
